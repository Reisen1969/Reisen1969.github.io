[{"title":"Hello World","path":"/2023/08/27/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"使用hexo","path":"/2023/08/27/hexo/","content":"使用hexo的一些记录 建站123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 这个文件夹&#x2F;主目录 作为 main 分支的文件夹, 我打算将gh-pages作为我的主页面. 一些快捷命令1$ hexo server 生成网站并本地预览 1$ hexo deploy 可以一件部署到github需要事先 在 _config.yml添加 12345deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;project&gt; # example, https://github.com/hexojs/hexojs.github.io branch: gh-pages 在 主目录执行 1npm install hexo-deployer-git --save 安装git插件. github自动化处理使用 node –version 指令检查你电脑上的 Node.js 版本，并记下该版本在储存库中建立 .github&#x2F;workflows&#x2F;pages.yml，并填入以下内容 (将 16 替换为上个步骤中记下的版本)： 1234567891011121314151617181920212223242526272829303132333435.github/workflows/pages.ymlname: Pageson: push: branches: - main # default branchjobs: pages: runs-on: ubuntu-latest permissions: contents: write steps: - uses: actions/checkout@v2 - name: Use Node.js 16.x uses: actions/setup-node@v2 with: node-version: &quot;16&quot; - name: Cache NPM dependencies uses: actions/cache@v2 with: path: node_modules key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache restore-keys: | $&#123;&#123; runner.OS &#125;&#125;-npm-cache - name: Install Dependencies run: npm install - name: Build run: npm run build - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; publish_dir: ./public 主题在 blog&#x2F;_config.yml 文件中找到并修改： theme: volantis 在主目录执行 npm i hexo-theme-volantis 更新主题:更新时，把 package.json 中的版本号改为 * 再执行 npm i 就可以了。 自定义设置","tags":["hexo"],"categories":["note"]},{"title":"一些乐理知识","path":"/2023/08/27/music/","content":"基本知识唱名: do re mi fa so la xi音名: C D E F G A B 度:do 到 re 是 2 度 大调更开心喜悦 全 全 半 全 全 全 半C D E F G A B C 小调更忧伤一些全半全全半全全 3 6 7 减半音就可以了 一些其他音阶中国民族音: 1 2 3 5 6 和风 3 4 6 7 1 &#x2F; 3 4 6 7 2 和弦从根音到冠音之间的距离 三和弦 七和弦 节拍44拍, 4分音符为一拍, 每小时4拍 五线谱 中央C一般是C4 五线谱带b的位置下降一个调. 高音谱号 G, 用来定位中央G的位置 G4 低音谱号 F, 定位低音F的位置 F3 pCoIXYq.png pCooY1f.pnghttps://zhuanlan.zhihu.com/p/31864712 C大调 C大调的D和G升调.png 升和降 升 #降 b","tags":["music"],"categories":["music"]},{"title":"启动riscv内核","path":"/2023/08/27/riscv/","content":"在这里只是记录一下,方便以后查阅 本文的内容来源 riscv官方网页 解决文件系统问题 编译busybox 9p 获取源码123git clone https://github.com/qemu/qemugit clone https://github.com/torvalds/linuxgit clone https://git.busybox.net/busybox 编译qemu12./configure --target-list=riscv64-softmmu --enable-virtfsmake -j $(nproc) 编译kernel123456789101112//这里设置的工具链,以自己环境里的为准//生成配置文件make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- defconfig//开始编译make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- -j $(nproc)//编译方法2 make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- defconfig make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- menuconfig make -j $(nproc) ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- vmlinux 编译Busybox12345make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- defconfigmake ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- menuconfig//Check Settings - Build static binary (no shared libs)make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- install CONFIG_PREFIX=./rootfs//这里选择将busybox安装到本目录下的./rootfs文件夹下 制作根文件系统1234567891011121314151617//制作文件系统$ cd youer_workspacemkdir rootfs$ cd rootfs$ dd if=/dev/zero of=rootfs.img bs=1M count=50$ mkfs.ext2 -L riscv-rootfs rootfs.img//将它挂载到 mnt/rootfs$ sudo mkdir /mnt/rootfs$ sudo mount rootfs.img /mnt/rootfs//将busybox编译出来的内容复制到rootfs.img文件系统中$ sudo cp -ar your_busybox/rootfs/* /mnt/rootfs//创建根目录$ sudo mkdir /mnt/rootfs/&#123;dev,home,mnt,proc,sys,tmp,var&#125;$ sudo chown -R -h root:root /mnt/rootfs 12345678910//检查文件系统$ df /mnt/rootfsFilesystem 1K-blocks Used Available Use% Mounted on/dev/loop5 49584 1704 45320 4% /mnt/rootfs$ mount | grep rootfsriscv64-linux/rootfs/rootfs.img on /mnt/rootfs type ext2 (rw,relatime)//卸载文件系统$ sudo umount /mnt/rootfs$ sudo rmdir /mnt/rootfs 使用根文件系统启动内核123456qemu-system-riscv64 -nographic -machine virt \\ -kernel linux/arch/riscv/boot/Image -append &quot;root=/dev/vda ro console=ttyS0&quot; \\ -drive file=your_rootfs.img,format=raw,id=hd0 \\ -device virtio-blk-device,drive=hd0 \\ -fsdev local,id=p9fs,path=./share,security_model=mapped \\-device virtio-9p-pci,fsdev=p9fs,mount_tag=p9 挂载共享目录1mount p9 -t 9p /mnt","tags":["riscv","linux"],"categories":["note"]},{"title":"wsl2终端代理设置","path":"/2023/08/27/wsl2proxy/","content":"wsl2终端代理设置12345678910111213141516171819202122232425262728293031323334353637383940414243444546hostip=$(cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;)wslip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)port=10809PROXY_HTTP=&quot;http://$&#123;hostip&#125;:$&#123;port&#125;&quot;echo $PROXY_HTTPexport http_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;export HTTP_PROXY=&quot;$&#123;PROXY_HTTP&#125;&quot;export https_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;export HTTPS_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;export ALL_PROXY=&quot;$&#123;PROXY_SOCKS5&#125;&quot;export all_proxy=&quot;$&#123;PROXY_SOCKS5&#125;&quot;git config --global http.https://github.com.proxy $&#123;PROXY_HTTP&#125;git config --global https.https://github.com.proxy $&#123;PROXY_HTTP&#125;echo &quot;Proxy has been opened.&quot;test_proxy()&#123; echo &quot;Host IP:&quot; $&#123;hostip&#125; echo &quot;WSL IP:&quot; $&#123;wslip&#125; echo &quot;Try to connect to Google...&quot; resp=$(curl -I -s --connect-timeout 5 -m 5 -w &quot;%&#123;http_code&#125;&quot; -o /dev/null www.google.com) if [ $&#123;resp&#125; = 200 ]; then echo &quot;Proxy setup succeeded!&quot; else echo &quot;Proxy setup failed!&quot; fi&#125;unset_proxy()&#123; unset http_proxy unset HTTP_PROXY unset https_proxy unset HTTPS_PROXY unset ALL_PROXY unset all_proxy git config --global --unset http.https://github.com.proxy git config --global --unset https.https://github.com.proxy echo &quot;Proxy has been closed.&quot;&#125;","tags":["wsl2","proxy"],"categories":["note"]},{"title":"记录一下自己使用的vim配置和插件","path":"/2023/07/08/vim-plugin/","content":"fzf插件12Plug &#x27;junegunn/fzf&#x27;, &#123; &#x27;dir&#x27;: &#x27;~/.fzf&#x27;, &#x27;do&#x27;: &#x27;./install --all&#x27; &#125;Plug &#x27;junegunn/fzf.vim&#x27; 1nnoremap &lt;silent&gt; &lt;c-p&gt; :Files &lt;CR&gt; 全范围搜索文件名 airline主题12Plug &#x27;vim-airline/vim-airline&#x27;Plug &#x27;vim-airline/vim-airline-themes&#x27; 目录栏插件Plug ‘preservim&#x2F;nerdtree’, { ‘on’: ‘NERDTreeToggle’ }","tags":["vim"]}]